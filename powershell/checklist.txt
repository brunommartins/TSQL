# Caminho do arquivo que deu erro
$driveLetter = "F:"
$dataFilePath = "F:\MSSQL\DADOS\DBAGVM000.mdf"
$sqlInstance = "NOME_DA_INSTANCIA"  # Ex: "SQLSERVER01" ou "MSSQLSERVER"

Write-Host "==== CHECKLIST DE DIAGN√ìSTICO ‚Äì ERRO 21 (DEVICE NOT READY) ====" -ForegroundColor Cyan

# 1. Verificar se a unidade est√° acess√≠vel
Write-Host "`n[1] Verificando se a unidade $driveLetter est√° acess√≠vel..." -ForegroundColor Yellow
if (Test-Path $driveLetter) {
    Write-Host "‚úÖ Unidade $driveLetter acess√≠vel." -ForegroundColor Green
} else {
    Write-Host "‚ùå Unidade $driveLetter n√£o est√° acess√≠vel. Verifique o armazenamento f√≠sico ou conex√£o SAN/iSCSI." -ForegroundColor Red
}

# 2. Verificar se o arquivo do MDF existe
Write-Host "`n[2] Verificando se o arquivo MDF est√° acess√≠vel..." -ForegroundColor Yellow
if (Test-Path $dataFilePath) {
    Write-Host "‚úÖ Arquivo encontrado: $dataFilePath" -ForegroundColor Green
} else {
    Write-Host "‚ùå Arquivo n√£o encontrado: $dataFilePath" -ForegroundColor Red
}

# 3. Verificar espa√ßo livre na unidade
Write-Host "`n[3] Verificando espa√ßo livre na unidade $driveLetter..." -ForegroundColor Yellow
$disk = Get-PSDrive | Where-Object { $_.Name -eq $driveLetter.TrimEnd(":") }
if ($disk) {
    Write-Host ("Espa√ßo livre: {0:N2} GB / Total: {1:N2} GB" -f ($disk.Free/1GB), ($disk.Used + $disk.Free)/1GB) -ForegroundColor Green
} else {
    Write-Host "‚ùå N√£o foi poss√≠vel obter informa√ß√µes de disco." -ForegroundColor Red
}

# 4. Buscar eventos de erro no Event Viewer relacionados a disco
Write-Host "`n[4] Buscando eventos recentes de erro de disco no Event Viewer..." -ForegroundColor Yellow
$events = Get-WinEvent -LogName System | Where-Object {
    $_.Message -match "disk" -and $_.LevelDisplayName -eq "Error"
} | Select-Object -First 5

if ($events) {
    Write-Host "‚ö†Ô∏è Foram encontrados os seguintes eventos de erro:" -ForegroundColor Magenta
    $events | Format-Table TimeCreated, Id, Message -AutoSize
} else {
    Write-Host "‚úÖ Nenhum erro de disco encontrado nos √∫ltimos eventos." -ForegroundColor Green
}

# 5. Gerar script para execu√ß√£o do DBCC CHECKDB
Write-Host "`n[5] Gerando script T-SQL para checagem da integridade do banco..." -ForegroundColor Yellow
$tsql = @"
USE master;
GO
-- Substitua NOME_DO_BANCO pelo nome real
DBCC CHECKDB('NOME_DO_BANCO') WITH NO_INFOMSGS, ALL_ERRORMSGS;
GO
"@
$tsql | Out-File -FilePath "$env:USERPROFILE\Desktop\DBCC_CHECKDB.sql" -Encoding UTF8
Write-Host "üìÑ Script gerado: '$env:USERPROFILE\Desktop\DBCC_CHECKDB.sql'" -ForegroundColor Green

Write-Host "`nChecklist conclu√≠do. Execute o script de DBCC assim que o disco estiver acess√≠vel." -ForegroundColor Cyan

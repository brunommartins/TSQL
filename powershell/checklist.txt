# === VARIÁVEIS ===
$driveLetter = "F:"
$dataFilePath = "F:\MSSQL\DADOS\DBAGVM000.mdf"
$sqlInstance = "NOME_DA_INSTANCIA"    # Ex: "SQLSERVER01" ou "MSSQLSERVER"
$databaseName = "NOME_DO_BANCO"       # Ex: "DBAGVM000"

Write-Host "==== CHECKLIST DE DIAGNÓSTICO – ERRO 21 (DEVICE NOT READY) ====" -ForegroundColor Cyan

# 1. Verificar se a unidade está acessível
Write-Host "`n[1] Verificando se a unidade $driveLetter está acessível..." -ForegroundColor Yellow
if (Test-Path $driveLetter) {
    Write-Host "✅ Unidade $driveLetter acessível." -ForegroundColor Green
} else {
    Write-Host "❌ Unidade $driveLetter não está acessível. Verifique o armazenamento físico ou conexão SAN/iSCSI." -ForegroundColor Red
}

# 2. Verificar se o arquivo do MDF existe
Write-Host "`n[2] Verificando se o arquivo MDF está acessível..." -ForegroundColor Yellow
if (Test-Path $dataFilePath) {
    Write-Host "✅ Arquivo encontrado: $dataFilePath" -ForegroundColor Green
} else {
    Write-Host "❌ Arquivo não encontrado: $dataFilePath" -ForegroundColor Red
}

# 3. Verificar espaço livre na unidade (corrigido)
Write-Host "`n[3] Verificando espaço livre na unidade $driveLetter..." -ForegroundColor Yellow
$volume = Get-CimInstance -ClassName Win32_LogicalDisk -Filter "DeviceID='$driveLetter'"
if ($volume) {
    $totalGB = [math]::Round($volume.Size / 1GB, 2)
    $freeGB = [math]::Round($volume.FreeSpace / 1GB, 2)
    Write-Host "Espaço livre: $freeGB GB / Total: $totalGB GB" -ForegroundColor Green
} else {
    Write-Host "❌ Não foi possível obter informações detalhadas de volume via CIM." -ForegroundColor Red
}

# 4. Buscar eventos de erro no Event Viewer relacionados a disco
Write-Host "`n[4] Buscando eventos recentes de erro de disco no Event Viewer..." -ForegroundColor Yellow
$events = Get-WinEvent -LogName System | Where-Object {
    $_.Message -match "disk" -and $_.LevelDisplayName -eq "Error"
} | Select-Object -First 5

if ($events) {
    Write-Host "⚠️ Foram encontrados os seguintes eventos de erro:" -ForegroundColor Magenta
    $events | Format-Table TimeCreated, Id, Message -AutoSize
} else {
    Write-Host "✅ Nenhum erro de disco encontrado nos últimos eventos." -ForegroundColor Green
}

# 5. Rodar DBCC CHECKDB automaticamente (se possível)
Write-Host "`n[5] Executando DBCC CHECKDB no banco $databaseName..." -ForegroundColor Yellow
try {
    $query = "DBCC CHECKDB('$databaseName') WITH NO_INFOMSGS, ALL_ERRORMSGS;"
    $result = Invoke-Sqlcmd -ServerInstance $sqlInstance -Query $query -ErrorAction Stop

    if ($result) {
        Write-Host "`n⚠️ Problemas encontrados no banco:" -ForegroundColor Red
        $result | Format-Table -AutoSize
    } else {
        Write-Host "✅ Nenhum problema de integridade encontrado no banco." -ForegroundColor Green
    }
}
catch {
    Write-Host "❌ Erro ao executar DBCC CHECKDB. Motivo: $($_.Exception.Message)" -ForegroundColor Red
}

Write-Host "`nChecklist concluído." -ForegroundColor Cyan
